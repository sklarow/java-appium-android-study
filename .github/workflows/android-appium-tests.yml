name: Android UI Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: macos-latest 

    steps:
      - name: Install tar (Linux/macOS)
        run: |
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update && sudo apt-get install -y tar
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            brew install gnu-tar
          fi

      - name: Verify tar Installation
        run: which tar || echo "tar is missing!"

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Install Android SDK
        run: |
          export ANDROID_SDK_ROOT=$HOME/android-sdk
          export ANDROID_HOME=$ANDROID_SDK_ROOT
          export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/emulator:$PATH
          
          mkdir -p $ANDROID_SDK_ROOT/cmdline-tools
          mkdir -p $ANDROID_SDK_ROOT/licenses
          
          curl -fsSL https://dl.google.com/android/repository/commandlinetools-mac-10406996_latest.zip -o sdk-tools.zip
          unzip sdk-tools.zip -d $ANDROID_SDK_ROOT/cmdline-tools
          mv $ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools $ANDROID_SDK_ROOT/cmdline-tools/latest

          echo -e "84831b9409646a918e30573bab4c9c91346d8abd" > $ANDROID_SDK_ROOT/licenses/android-sdk-license
          sdkmanager --list

      - name: Install Android System Image
        run: |
          export ANDROID_SDK_ROOT=$HOME/android-sdk
          export ANDROID_HOME=$ANDROID_SDK_ROOT
          export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/emulator:$PATH
          
          sdkmanager --install "system-images;android-30;google_apis;x86_64"

      - name: Create AVD
        run: |
          export ANDROID_SDK_ROOT=$HOME/android-sdk
          export ANDROID_HOME=$ANDROID_SDK_ROOT
          export PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/emulator:$PATH

          avdmanager create avd \
            --name pixel_api30 \
            --package "system-images;android-30;google_apis;x86_64" \
            --device "pixel" \
            --force

      - name: Start Emulator and Wait for Boot
        run: |
          export PATH=$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools:$PATH
          
          nohup $ANDROID_HOME/emulator/emulator -avd pixel_api30 \
            -no-audio -no-boot-anim -no-window -gpu swiftshader -no-snapshot \
            -camera-back none -camera-front none > emulator.log 2>&1 &

          echo "Waiting for ADB to detect device..."
          adb wait-for-device

          until adb shell getprop sys.boot_completed | grep -m 1 "1"; do
            echo "Device is still booting..."
            sleep 5
          done
          echo "Device is fully booted."

          # Unlock screen
          adb shell input keyevent 82

          # Disable animations
          adb shell settings put global window_animation_scale 0
          adb shell settings put global transition_animation_scale 0
          adb shell settings put global animator_duration_scale 0

      - name: Install Node.js & Appium
        run: |
          curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
          sudo apt-get install -y nodejs
          npm install -g appium@2.2.1
          appium driver install uiautomator2

      - name: Start Appium Server
        run: |
          nohup appium server --base-path / --allow-insecure=adb_shell --log appium.log --debug > appium.log 2>&1 &
          sleep 15
          curl -s http://localhost:4723/status

      - name: Verify Environment
        run: |
          echo "=== Environment Variables ==="
          echo "ANDROID_HOME: $ANDROID_HOME"
          echo "PATH: $PATH"
          
          echo "=== Connected Devices ==="
          adb devices -l
          
          echo "=== Appium Status ==="
          curl -s http://localhost:4723/status

      - name: Run Cucumber Tests
        run: |
          cd androidcucumber
          mvn clean test -Dmaven.test.failure.ignore=true -X


      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            androidcucumber/target/cucumber-reports/
            androidcucumber/target/surefire-reports/
          if-no-files-found: warn

      - name: Deploy Cucumber Reports to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: 